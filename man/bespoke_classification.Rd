% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bespoke_classification-fit.R
\name{bespoke_classification}
\alias{bespoke_classification}
\alias{bespoke_classification.default}
\alias{bespoke_classification.data.frame}
\alias{bespoke_classification.matrix}
\alias{bespoke_classification.formula}
\alias{bespoke_classification.recipe}
\title{Fit a \code{bespoke_classification}}
\usage{
bespoke_classification(x, ...)

\method{bespoke_classification}{default}(x, ...)

\method{bespoke_classification}{data.frame}(x, y, fn, ...)

\method{bespoke_classification}{matrix}(x, y, fn, ...)

\method{bespoke_classification}{formula}(formula, data, fn, ...)

\method{bespoke_classification}{recipe}(x, data, fn, ...)
}
\arguments{
\item{x}{Depending on the context:
\itemize{
\item A \strong{data frame} of predictors.
\item A \strong{matrix} of predictors.
\item A \strong{recipe} specifying a set of preprocessing steps created from
\code{\link[recipes:recipe]{recipes::recipe()}}.
}}

\item{...}{Additional parameters passed on to the model "function."}

\item{y}{When \code{x} is a \strong{data frame} or \strong{matrix}, \code{y} is the outcome
specified as:
\itemize{
\item A \strong{data frame} with 1 numeric column.
\item A \strong{matrix} with 1 numeric column.
\item A numeric \strong{vector}.
}}

\item{fn}{A function that takes a data.frame as input and returns \emph{a vector}
(integer, character, or factor) indicating the outcomes as output (with one
value per input row). We may someday extend this for probabilities.}

\item{formula}{A formula specifying the outcome terms on the left-hand side,
and the predictor terms on the right-hand side.}

\item{data}{When a \strong{recipe} or \strong{formula} is used, \code{data} is specified as:
\itemize{
\item A \strong{data frame} containing both the predictors and the outcome.
}}
}
\value{
A \code{bespoke_classification} model object.
}
\description{
\code{bespoke_classification()} produces a fitted "model," where the model is simply a
user-supplied function. Note that, despite appearances, the "model" is \emph{not}
actually trained to fit the data; it is only put into the context of a
"fitted" model in order to play nice with other tidymodels functions. It
will, however, return a member of the training outcomes for each input during
prediction.
}
